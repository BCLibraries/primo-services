<?php
namespace BCLib\PrimoTools;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-03 at 14:02:25.
 */
class QueryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Query
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Query;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testNoSearchTermsReturnsEmptyString()
    {
        $this->assertEmpty((string) $this->object);
    }

    public function testAddSingleISBNWorks()
    {
        $expected = 'query=isbn,contains,1234567890';
        $this->object->isbn('1234567890');
        $this->assertEquals($expected, (string) $this->object);
    }

    public function testISBNsAreNormalized()
    {
        $expected = 'query=isbn,contains,1234567890';
        $this->object->isbn('123-4567 890');
        $this->assertEquals($expected, (string) $this->object);
    }

    public function testMultipleISBNsConcatenatedWithOr()
    {
        $expected = 'query=isbn,contains,1234567890+OR+1234567890123';
        $this->object->isbn('1234567890')->isbn('1234567890123');
        $this->assertEquals($expected, (string) $this->object);
    }

    public function testChainingWorks()
    {
        $returned = $this->object->isbn('1234567890');
        $this->assertSame($this->object, $returned);
    }

    public function testAddingSingleKeywordWorks()
    {
        $expected = 'query=any,contains,foobar';
        $this->object->keyword('foobar');
        $this->assertEquals($expected, (string) $this->object);
    }

    public function testAddingKeywordAndISBNWorks()
    {
        $expected = 'query=any,contains,foobar&query=isbn,contains,1234567890';
        $this->object->keyword('foobar')->isbn('1234567890');
        $this->assertEquals($expected, (string) $this->object);
    }

    public function testAddingSingleISSNWorks()
    {
        $expected = 'query=issn,contains,1234+5678';
        $this->object->issn('1234+5678');
        $this->assertEquals($expected, (string) $this->object);
    }

    public function testISSNsAreNormalized()
    {
        $expected = 'query=issn,contains,1234+5678+OR+8765+4321+OR+1235+5321';
        $this->object->issn('1234-5678')->issn('8765 4321')->issn('12355321');
        $this->assertEquals($expected, (string) $this->object);
    }
}
